import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { contactFormSchema } from "../shared/schema";

export async function registerRoutes(app: Express): Promise<Server> {
  // API route for sending contact form to Telegram
  app.post("/api/send-to-telegram", async (req, res) => {
    try {
      // Validate request body
      const validatedData = contactFormSchema.parse(req.body);

      // Get environment variables
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const chatId = process.env.TELEGRAM_CHAT_ID;

      if (!botToken || !chatId) {
        console.error("Missing Telegram configuration");
        return res.status(500).json({
          success: false,
          error: "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram.",
        });
      }

      // Format message for Telegram
      const projectType = validatedData.project 
        ? `\nüìã –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${getProjectTypeLabel(validatedData.project)}`
        : "";

      const message = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!

üë§ –ò–º—è: ${validatedData.name}
üìß Email: ${validatedData.email}${projectType}

üí¨ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
${validatedData.message}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" })}`;

      // Send message to Telegram
      const telegramResponse = await fetch(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: "HTML",
          }),
        }
      );

      if (!telegramResponse.ok) {
        const errorData = await telegramResponse.json();
        console.error("Telegram API error:", errorData);
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram");
      }

      res.json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
      });
    } catch (error) {
      console.error("Error in send-to-telegram:", error);

      if (error instanceof Error && error.message.includes("validation")) {
        return res.status(400).json({
          success: false,
          error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã",
        });
      }

      res.status(500).json({
        success: false,
        error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      });
    }
  });

  // API route for downloading portfolio
  app.get("/api/download-portfolio", (req, res) => {
    try {
      const fs = require('fs');
      const path = require('path');
      
      const portfolioPath = path.join(process.cwd(), "assets", "portfolio.pdf");
      
      if (!fs.existsSync(portfolioPath)) {
        return res.status(404).json({
          error: "–§–∞–π–ª –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        });
      }

      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="Alexey-Rozepin-Portfolio.pdf"');
      
      const fileStream = fs.createReadStream(portfolioPath);
      fileStream.pipe(res);
    } catch (error) {
      console.error("Error downloading portfolio:", error);
      res.status(500).json({
        error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.",
      });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

function getProjectTypeLabel(projectType: string): string {
  const labels: Record<string, string> = {
    website: "–í–µ–±-—Å–∞–π—Ç",
    landing: "–õ–µ–Ω–¥–∏–Ω–≥",
    ecommerce: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
    "telegram-bot": "Telegram –±–æ—Ç",
    other: "–î—Ä—É–≥–æ–µ",
  };
  
  return labels[projectType] || projectType;
}
